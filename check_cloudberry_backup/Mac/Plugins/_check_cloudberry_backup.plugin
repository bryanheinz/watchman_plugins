#!/usr/bin/env python3

#
# version: 1.5.0
# requires Watchman v7
#

import os
import sys
import time
import shutil
import sqlite3
import calendar
import datetime
from xml.etree import ElementTree as et

# workaround testing vs. production; still requires WM to be installed,
# but allows for it to be manually run by directly calling Python.
try:
    from Toolkit.plist_handler import writePlist
    from Toolkit.settings_handler import check_settings
except ImportError:
    sys.path.append('/Library/MonitoringClient/Modules')
    from Toolkit.plist_handler import writePlist
    from Toolkit.settings_handler import check_settings


# CloudBerry Backup root config folder
# cbb_root = '/Library/Application Support/Online Backup/00000000-0000-0000-0000-000000000000/'
# _Turns out_ that not all CBB config folders are all zeros. It appears that MSP
# installers actually have a UUID for the folder. These next few lines fix the
# assumption that the config folder will be all zeros. However, it still assumes
# that there is only one config folder and grabs the first folder returned from
# the ls. If there's ever a problem with multiple config folders, the code will
# need to be refactored to support either looping through and reporting on each
# config, or add a WM setting to specify which config folder to use.
cbb_root = '/Library/Application Support/Online Backup/'
cbb_config_dirs = os.listdir(cbb_root)
if len(cbb_config_dirs) > 0:
    cbb_root = os.path.join(cbb_root, cbb_config_dirs[0])
# CloudBerry ~v2.10 uses a new config path, this checks if that path exists.
# if the path doesn't exist, assume that it's the old v2.8 path.
if not os.path.exists(cbb_root):
    cbb_root = '/opt/local/CloudBerry Backup/'
    if not os.path.exists(cbb_root):
        # the CBB config folder doesn't appear to exist at either known locations
        # print the error, and exit with 2 alerting the admin.
        print("Error, can't find the CloudBerry Backup configuration folder.")
        sys.exit(2)


# read watchman preferences
settings_plist = '/Library/MonitoringClient/PluginSupport/_check_cloudberry_backup.plist'
base_settings = { # default settings
    'should_alert_install' : True, # if true, send alert if CBB not installed
    'backup_warning' : 3, # days until backup warning
    'backup_alert' : 7, # days until backup alert
    'PrefPaneVisibility' : True, # show the pref pane, doesn't seem to work...
}
settings = check_settings(base_settings, settings_plist)
writePlist(settings, settings_plist)


# convert days to seconds. 1 day == 86400 seconds
backup_warning_sec = settings['backup_warning'] * 86400
backup_alert_sec = settings['backup_alert'] * 86400


def check_install():
    # check if CloudBerry Backup isn't installed
    if os.path.exists('/Applications/CloudBerry Backup.app'):
        # CBB is installed.
        return True
    else:
        # CBB isn't installed
        print("CloudBerry Backup isn't installed.")
        return False

def check_license():
    cbb_license = os.path.join(cbb_root, 'config/.License')
    if not os.path.exists(cbb_license):
        # CBB license file doesn't even exist. so, it can't be licensed.
        print("CloudBerry Backup not licensed")
        return False
    else:
        # license file is an XML doc, parse it for the key.
        # if not licensed, it's an empty file.
        key = None
        try:
            # parse XML for the LicenseKey key
            tree = et.parse(cbb_license)
            key = tree.find('LicenseKey').text
        except et.ParseError:
            # we'll get an error if the file is empty- aka not licensed.
            pass
        except AttributeError:
            # this error happens if LicenseKey isn't a key. typically this means
            # that CBB is running a trial.
            pass
        
        if key is None:
            # couldn't retrieve a license key.
            print("CloudBerry Backup not licensed.")
            return False
        else:
            # CBB is licensed
            return True

def check_last_backup():
    # the most accurate way to get the backup time will be to get the last
    # backed up item in the session_history table, check the result code, and
    # then pull the date_start_utc value for the session row.
    
    # copy the DB and it's temp files to a temporary location to safely read from
    og_db_path = os.path.join(cbb_root, 'config/cbbackup.db')
    og_db_shm_path = os.path.join(cbb_root, 'config/cbbackup.db-shm')
    og_db_wal_path = os.path.join(cbb_root, 'config/cbbackup.db-wal')
    if not os.path.exists(og_db_path):
        # check if the DB path even exists.
        print("CloudBerry Backup DB doesn't exist. Can't check last backup.")
        return 'alert'
    else:
        try:
            # create a temp directory to read the DB from
            os.mkdir('/tmp/cbb-db-tmp')
        except OSError:
            # folder probably already exists
            pass
        shutil.copyfile(og_db_path, '/tmp/cbb-db-tmp/cbbackup.db')
    if os.path.isfile(og_db_shm_path):
        shutil.copyfile(og_db_shm_path, '/tmp/cbb-db-tmp/cbbackup.db-shm')
    if os.path.isfile(og_db_wal_path):
        shutil.copyfile(og_db_wal_path, '/tmp/cbb-db-tmp/cbbackup.db-wal')
    
    db_path = '/tmp/cbb-db-tmp/cbbackup.db'
    
    try:
        # connect to the DB
        db = sqlite3.connect(db_path)
    except:
        # alert if this connection fails
        print("Cloudn't open CloudBerry Backup DB.")
        return 'alert'
    
    # get last 5000 session_history items
    session_history = db.execute(
        # "select id,plan_id from session_history where id = (select max(id) from session_history);"
        "select id,plan_id,date_start_utc,result,error_message from session_history order by id desc limit 5000;"
    ).fetchall()
    
    if len(session_history) == 0:
        # there isn't any session history. either there's a problem with the DB or, more likely,
        # CBB has never been run before on this machine.
        print("It appears that CloudBerry Backup has never run.")
        return "warn"
    
    # setup last backup session variable
    last_backup_session = ""
    # setup last successful backup session variable
    last_successful_session = ""
    # loop through sessions checking if it's a backup plan and if it was successful
    for session in session_history:
        # get the plan type for this sessions's plan_id
        try:
            plan_type = db.execute(
                "select type from plan_name where plan_id = '{0}';".format(session[1])
            ).fetchone()[0]
        except TypeError:
            # the log didn't return a plan type
            if plan_type is None:
                continue
        except Exception as e:
            print("Unaccounted error getting session type. Please review.\n{}" \
                .format(e))
        # backup plan is type 1, restore is type 2.
        if plan_type == 1:
            # this session appears to be a backup session
            if last_backup_session == "":
                # this sets up last_backup_session to be a write-once var
                # this will be used to report on the last backup session
                # but also check what the last successful backup session was
                last_backup_session = session
            if session[3] == 6: # checks if the session was successful
                last_successful_session = session
                break
    
    db.close()
    shutil.rmtree('/tmp/cbb-db-tmp')
    
    if last_backup_session == "":
        print("Couldn't find a backup session. It doesn't appear that CloudBerry Backup has run before on this machine.")
        return "warn"
    
    # check if there has ever been a successful backup session
    if last_successful_session == "":
        print("No successful backup sessions have ever run.")
        return "warn"
    
    # get last successful start time as a string
    session_start = str(last_successful_session[2])
    # convert session_start time into UTC epoch time.
    backup_date = datetime.datetime.strptime(session_start, '%Y%m%d%H%M%S')
    backup_epoch_utc = calendar.timegm(backup_date.timetuple())
    # convert epoch time to a local date/time string
    backup_date_local = datetime.datetime.fromtimestamp(backup_epoch_utc) \
        .strftime('%Y-%m-%d %H:%M:%S')
    
    # get current epoch time
    current_epoch_time = int(time.time())
    # get the seconds between now and the last backup session
    seconds_since_backup = current_epoch_time - backup_epoch_utc
    
    # check if the last backup was successful or not
    if last_backup_session != last_successful_session:
        # last backup session wasn't successful for whatever reason
        if last_backup_session[3] == 2:
            # backup in progress
            print("A backup is currently in progress.")
        elif last_backup_session[3] == 6:
            # last back up was successful?
            # this shouldn't ever be trigger, but just in case...
            pass
        elif last_backup_session[3] == 8:
            # backup error
            print(
                "The last backup session exited with the error:\n\t{0}" \
                .format(last_backup_session[4])
            )
        elif last_backup_session[3] == 9:
            # manually stopped
            print("The last backup session appears to have been manually stopped.")
        elif last_backup_session[3] == 100:
            # system sleep stopped the backup
            print("The last backup session appears to have stopped due to system sleep.")
        else:
            # generic/unspecified error
            print(
                "The last backup had an unknown error:\n\t{0}" \
                .format(last_backup_session[4])
            )
    
    # if the seconds since backup are longer than the alert time, alert
    if seconds_since_backup > backup_alert_sec:
        print(
            "ALERT: last backup is older than {0} days. Last successful backup: {1}" \
            .format(settings['backup_alert'], backup_date_local)
        )
        return 'alert'
    
    # if the seconds since backup are longer than the warn time, warn
    if seconds_since_backup > backup_warning_sec:
        print(
            "WARNING: last backup is older than {0} days. Last successful backup: {1}" \
            .format(settings['backup_warning'], backup_date_local)
        )
        return 'warn'
    
    # if this runs, then the backups are within the warning and alert threshold
    print("Last successful backup: {0}".format(backup_date_local))
    return 'ok'


is_installed = check_install()
if not is_installed:
    # CBB isn't installed check if this should throw an error or not
    if settings['should_alert_install']:
        # should alert that CBB isn't installed
        sys.exit(2)
    else:
        # don't alert, this script didn't see anything <(<_<<) (>>_>)> ^(^_^)^ ~(o.o)~
        sys.exit(25)

# check the license status
is_licensed = check_license()
if not is_licensed:
    # CBB isn't licensed, send an alert
    sys.exit(2)

backup_status = check_last_backup()

if backup_status == 'alert':
    # backup status wants us to alert
    sys.exit(2)
elif backup_status == 'warn':
    # backup status wants us to warn
    sys.exit(20)
else:
    # everything looks solid!
    sys.exit(0)
