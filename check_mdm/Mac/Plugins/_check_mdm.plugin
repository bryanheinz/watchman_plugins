#!/usr/bin/env python3
#
# tested on macOS 10.12 - 11.0.1
# tested with the following MDMs: Meraki, SimpleMDM
#

import os
import sys
import platform
import subprocess
from distutils.version import LooseVersion


# workaround testing vs. production; still requires WM to be installed,
# but allows for it to be manually run by directly calling Python.
try:
    from PluginToolkit import writePlist
    from PluginToolkit import check_settings
    from PluginToolkit import readPlistFromString
except ImportError:
    sys.path.append('/Library/MonitoringClient/Modules')
    sys.path.append('/Library/MonitoringClient/Modules/Toolkit')
    from PluginToolkit import writePlist
    from PluginToolkit import check_settings
    from PluginToolkit import readPlistFromString


# read preferences to know how to alert if there's a problem
settings_plist = '/Library/MonitoringClient/PluginSupport/_check_mdm_settings.plist'
base_settings = {
    'mdm_warning' : 0,
    'uamdm_warning': 1,
    'PrefPaneVisibility' : True,
}
settings = check_settings(base_settings, settings_plist)
writePlist(settings, settings_plist)

# setup exit alerting variables
# 0 == None, Alert on website, no email
# 1 == Warn, Emails once a day, can be muted
# 2 == Alert, Email everytime the plugin is run, no mute
if settings['mdm_warning'] == 0:
    # none
    mdm_warn_level = 20
elif settings['mdm_warning'] == 1:
    # warn
    mdm_warn_level = 2
else:
    # alert
    mdm_warn_level = 200

if settings['uamdm_warning'] == 0:
    uamdm_warn_level = 20
elif settings['uamdm_warning'] == 1:
    uamdm_warn_level = 2
else:
    uamdm_warn_level = 200


# get macOS version
mac_os = platform.mac_ver()[0]
# check if this machine supports UAMDM
uamdm_req = LooseVersion(mac_os) >= LooseVersion('10.13.4')


def termy(cmd):
    task = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = task.communicate()
    return(out, err)

def check_uamdm():
    # only works on 10.13.4+
    # checks if enrolled in MDM and if the user has approved it
    out, err = termy([
        '/usr/bin/profiles', 'status',
        '-type', 'enrollment'
    ])

    if 'User Approved' in out:
        # user has approved the MDM enrollment
        return(True)
    else:
        # user has not approved the MDM enrollment
        return(False)

def parse_profile_data(plist):
    # long loop through the system_profile plist to find the MDM vendor name
    for i in plist:
        items = i.get('_items')
        if items:
            for ii in items:
                ii_items = ii.get('_items')
                if ii_items:
                    for iii in ii_items:
                        iii_items = iii.get('_items')
                        if iii_items:
                            for iv in iii_items:
                                mdm_vendor = get_vendor_name(iv)
                                if mdm_vendor:
                                    return(mdm_vendor)

def get_vendor_name(iv):
    # parse the last bit of the system_profile plist for the MDM vendor name
    iv_item = iv.get('_name')
    if iv_item == 'com.apple.mdm':
        mdm_vendor = iv.get('spconfigprofile_organization')
        if mdm_vendor:
            return(mdm_vendor.strip())


#
# this new method parses the very deep output from
# `system_profiler SPConfigurationProfileDataType`. this is by far the most
# reliable way that i've found to get the actual MDM vendor name. the previous
# method relied on too many assumptions that ended up not being true based on
# the MDM vendor or the macOS version. please let me know if you see any bad
# data being output to the MDM vendor name:
# https://github.com/bryanheinz/watchman_plugins/issues
# if you could let me know what the MDM vendor is and send me as much data from
# `system_profiler SPConfigurationProfileDataType` that you can stripping any
# confidential information. that will help me track down any issues pulling the
# vendor data for MDM's that i haven't used before.
#

out, err = termy([
    'system_profiler', 'SPConfigurationProfileDataType', '-xml'
])

plist = readPlistFromString(out.decode())
mdm_vendor = parse_profile_data(plist)

if mdm_vendor:
    # MDM is installed
    print(("MDM Vendor: {0}".format(mdm_vendor)))
    if uamdm_req:
        # user approved MDM is required
        if check_uamdm():
            # MDM has been approved
            print("MDM is installed and approved.")
            sys.exit(0)
        else:
            # MDM isn't approved
            print("MDM is installed and NOT approved.")
            sys.exit(uamdm_warn_level)
    else:
        # user approved MDM isn't required
        print("MDM is installed.")
        sys.exit(0)
else:
    # MDM isn't installed
    print("MDM not installed.")
    sys.exit(mdm_warn_level)
